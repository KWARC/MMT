package info.kwarc.mmt.doc

import info.kwarc.mmt.api._
import frontend._
import utils._

class Setup extends ShellExtension("setup") {
   def helpText = "usage: setup ROOT/FOLDER" 
   def run(args: List[String]): Boolean = {
    val l = args.length
    val systemFolder: File = if (l == 1) File(args(0)) else {
      println(helpText)
      return true
    }
    val contentFolder = systemFolder.up/"content"
    val jEditSettingsFolder = OS.jEditSettingsFolder

    println("If the following shows any error messages, you can try looking at the source code.")
    println("The code is in info.kwarc.mmt.doc.Setup\n")

    println("using the following data")
    println("MMT system folder:     " + systemFolder)
    println("MMT content folder:    " + contentFolder)
    println("jEdit settings folder: " + (jEditSettingsFolder getOrElse "not found"))
    println("")

    val configFile = systemFolder/"deploy"/"main"/"mmtrc"
    println("generating " + configFile)
    val config = s"""// generated by setup, may be extended
#backends
oaf $contentFolder
"""
    File.write(configFile, config)
    println("done\n")
    controller.loadConfigFile(configFile, false)

    println("cloning content repositories (by calling git; make sure it's installed and on your path)")
    contentFolder.mkdirs
    
    try {
       controller.cloneRecursively("MMT/examples")
    } catch {case e: Error =>
       println(e.toStringLong)
    }
    println("done\n")

    jEditSettingsFolder foreach {jsf =>
       controller.extman.getOrAddExtension(classOf[ShellExtension], "jeditsetup") match {
          case None =>
            println("jedit plugin not on classpath")
          case Some(jEditSetup) => 
             println("installing jEdit plugin")
             jEditSetup.run(List("install",jsf.toString))
             println("done\n")
      
             println("configuring sbt target for rebuilding and reinstalling the jEdit plugin from sources")
             File.write(systemFolder/"src"/"jedit-settings-folder", jsf.toString)
             println("done\n")
       }
    }
    true
   }
}
