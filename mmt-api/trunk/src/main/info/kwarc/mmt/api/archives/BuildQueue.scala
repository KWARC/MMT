package info.kwarc.mmt.api.archives

import java.util.concurrent.ConcurrentLinkedQueue
import scala.collection.mutable.{HashMap}

import info.kwarc.mmt.api._
import frontend._
import utils._

/** */
class QueuedTask(val target: TraversingBuildTarget, val task: BuildTask) {
  /** task should be queued at end */
  var lowPriority: Boolean = true
  def highPriority = !lowPriority
  /** task was not requested directly but added as dependency of some other task */
  var dependencyClosure: Boolean = false

  /** dependencies that will be used but are not available */
  var missingDeps: Iterable[Dependency] = Nil
  /** resources that will be provided once successfully built */
  var willProvide: List[ResourceDependency] = Nil
}

/** */
sealed abstract class BuildResult {
   /**
    * resources that were used during building
    */
   def used: List[ResourceDependency]
   /** resources that have been built successfully */
   def provided: List[ResourceDependency]
}

object BuildResult {
  def empty: BuildResult = BuildSuccess(Nil, Nil)
}

/** successful build */
case class BuildSuccess(used: List[ResourceDependency], provided: List[ResourceDependency]) extends BuildResult

/** unrecoverable failure */
case class BuildFailure(used: List[ResourceDependency], provided: List[ResourceDependency]) extends BuildResult

/** recoverable failure: build should be retried after building a missing dependency */
case class MissingDependency(needed: List[ResourceDependency], provided: List[ResourceDependency]) extends BuildResult {
   def used = Nil
}


/** dependency of a [[QueuedTask]] */
sealed abstract class Dependency

/** dependency on another [[BuildTask]]
 *  @param inPath path to file (without inDim)
 */
case class BuildDependency(key: String, archive: Archive, inPath: FilePath) extends Dependency

/** like [[BuildDependency]] but for a directory
 *  @param inPath path to file (without inDim)
 */
case class DirBuildDependency(key: String, archive: Archive, inPath: FilePath, children: List[BuildTask]) extends Dependency

sealed abstract class ResourceDependency extends Dependency

/** a dependency on a physical resource
  */
case class PhysicalDependency(file: File) extends ResourceDependency

/** a dependency on an MMT module that must be provided by building some other [[BuildTask]]
  *
  * providing the dependency typically requires some catalog to determine the appropriate [[BuildTask]]
  */
case class LogicalDependency(mpath: MPath) extends ResourceDependency

/** a dependency on an externally provided source file that cannot be built by MMT
  *
  * this cannot be discharged by MMT, but changes to the file can trigger rebuilding
  */
case class ForeignDependency(file: File) extends Dependency


/** handles build tasks generated by a [[TraversingBuildTarget]] */
abstract class BuildManager extends Extension {
  def addTasks(qts: Iterable[QueuedTask])
  def waitToEnd
}

/**
  * builds tasks immediately (no queueing, no dependeny management, no parallel processing)
  */
class TrivialBuildManager extends BuildManager {
  def addTasks(qts: Iterable[QueuedTask]) = qts.foreach {qt =>
    qt.target.runBuildTask(qt.task)
  }
  // no need to wait
  def waitToEnd {}
}

/**
 * queues build tasks for multi-threaded execution, includes dependency management
 */
class BuildQueue extends BuildManager {
  private var queued = new ConcurrentLinkedQueue[QueuedTask]
  private var blocked : List[QueuedTask] = Nil

  /** all tasks currently in the queue */
  val alreadyQueued = new HashMap[Dependency,QueuedTask]
  /** all tasks that were built (successfully or permanently-failing) since the last time the queue was empty */
  val alreadyBuilt = new HashMap[Dependency,BuildResult]

  private var continue: Boolean = true
  private var stopOnEmpty: Boolean = false

  val sleepTime: Int = 2000

  // TODO should take argument up:Update
  private def addTask(qt: QueuedTask) {
     val qtDep = qt.task.asDependency
     if (alreadyBuilt isDefinedAt qtDep) {
       if (qt.dependencyClosure) {
         // dependency of previous job: skip
         return
       } else {
         // new job: build anew
         alreadyBuilt -= qtDep
       }
     }
     if (alreadyQueued isDefinedAt qtDep) {
       if (qt.lowPriority) {
         // low priority: no need to add, skip
         return
       } else {
         // high priority: queue again
         queued.remove(alreadyQueued(qtDep))
         alreadyQueued -= qtDep
       }
     }
     // add to front/end of queue depending on priority
     if (qt.lowPriority) {
       queued.add(qt) //TODO add at end instead of front
     } else {
       queued.add(qt)
     }
     alreadyQueued(qtDep) = qt
  }

  // TODO should take argument up:Update
  def addTasks(qts: Iterable[QueuedTask]) {
    synchronized {
      qts.foreach {qt => addTask(qt)}
    }
  }

  /**
   * recursively queues all dependencies of the next task; then returns the head of the queue
   */
  private def getNextTask: Option[QueuedTask] = synchronized {
     val qt = queued.peek
     if (qt == null)
        return None
     val qtDep = qt.task.asDependency
     // queue all dependencies at beginning
     qt.missingDeps = qt.missingDeps.flatMap {
        case bd: BuildDependency =>
           buildDependency(bd)
           Nil
        case bd: DirBuildDependency =>
           // skip for now
           // TODO
           Nil
        case r: ResourceDependency =>
           List(r)
        case fd: ForeignDependency =>
           // should not happen, cannot be handled at this point
           Nil
     }
     if (!qt.missingDeps.isEmpty) {
        // dependency has not been built yet
        queued.poll
        alreadyQueued -= qtDep
        blocked = blocked ::: List(qt)
     }
     if (queued.peek != qt) {
        // all dependencies are queued now; recursively process them
        getNextTask
     } else {
        // remove qt from queue and return it
        queued.poll
        alreadyQueued -= qtDep
        Some(qt)
     }
  }

  private def findResource(r: ResourceDependency): Option[BuildDependency] = r match {
     case PhysicalDependency(f) =>
        val (root,out) = controller.backend.resolveAnyPhysical(f).getOrElse(return None)
        controller.addArchive(root)
        val a = controller.backend.getArchive(root).getOrElse(return None)
        out match {
           case FilePath("export" :: key :: _ ) =>
              // a resource generated by an [[Exporter]]
              val exp = controller.extman.get(classOf[Exporter], key).getOrElse(return None)
              val in = exp.producesFrom(out).getOrElse(return None)
              val bd = BuildDependency(key, a, in)
              Some(bd)
           case f if f.startsWith(a.resolveDimension(source)) =>
              val imp = controller.extman.get(classOf[Importer], ???).getOrElse(return None) //TODO what importer to use?
              val in = imp.producesFrom(out).getOrElse(return None)
              val bd = BuildDependency(imp.key, a, in)
              Some(bd)
           case _ =>
              // TODO lookup in some other way
              None
        }
     case LogicalDependency(mp) =>
        // TODO lookup in some catalog, details TBD
        None
  }

  private def buildDependency(bd: BuildDependency) {
     val target = controller.extman.get(classOf[TraversingBuildTarget], bd.key).getOrElse {
        // TODO
        return
     }
     val qts = target.makeBuildTasks(bd.archive, bd.inPath, None).map {qt =>
        qt.lowPriority = false
        qt.dependencyClosure = true
        qt
     }
    addTasks(qts)
  }

  /** unblock previously blocked tasks whose dependencies have now been provided */
  private def unblockTasks(res: BuildResult) {
     blocked.foreach {bt =>
        bt.missingDeps = bt.missingDeps.toList diff res.provided
     }
     val (unblocked,stillBlocked) = blocked.partition(_.missingDeps.isEmpty)
     blocked = stillBlocked
     unblocked.reverseMap {qt => queued.add(qt)}
  }

  override def start(args: List[String]) {
    buildThread.start
  }

  override def destroy {
    synchronized {
      continue = false
    }
  }

  def destroyWhenQueueEmpty {
    synchronized {
      stopOnEmpty = true
    }
  }

  val buildThread = new Thread {
    override def run {
      while (continue) {
        getNextTask match {
          case Some(qt) =>
            // TODO run this in a Future
            val res = qt.target.runBuildTask(qt.task)
            res match {
              case _:BuildSuccess | _: BuildFailure =>
                 // remember finished build
                 val qtDep = qt.task.asDependency
                 alreadyBuilt(qtDep) = res
              case MissingDependency(provided, missing) =>
                 // register missing dependencies and requeue
                 qt.missingDeps = missing
                 queued.add(qt)
            }
            unblockTasks(res)
          case None =>
            alreadyBuilt.clear
            if (stopOnEmpty)
              continue = false
            else
              Thread.sleep(sleepTime)
        }
      }
    }
  }

  def waitToEnd: Unit = {
    destroyWhenQueueEmpty
    buildThread.join()
  }
}
