package info.kwarc.mmt.openmath

import info.kwarc.mmt.api._
import info.kwarc.mmt.api.archives.BuildTask

/** An exporter that creates an OpenMath CD for every theory */
class Exporter extends archives.Exporter {
  val key = "openmath"
  
  /** We are only interested in CDs, so we skip documents */
  def exportDocument(doc: documents.Document, bt: BuildTask) {}

  /** This could be used to export a table of contents */
  def exportNamespace(dp: DPath, bt: BuildTask, namespaces: List[BuildTask], modules: List[BuildTask]) {}

  /** OpenMath does not support views, so we skip them */ 
  def exportView(view: modules.DeclaredView, bf: BuildTask) {}
  
  /** flatten a theory and export it as a CD */
  def exportTheory(thy: modules.DeclaredTheory, bf: BuildTask) {
    // simplification flattens a theory, this removes in particular all named imports
    // controller is MMT's main object, it is available to every extension
    controller.simplifier(thy)
    
    // build an XML element using Scala's built-in XML syntax
    val cd = <CD>
     <CDComment>Generated by MMT</CDComment>
     <CDName>{thy.name.toString}</CDName>
     <CDBase>{thy.parent.toString}</CDBase>
     <CDURL>{thy.path.toString}</CDURL>
     
     <Description>
     </Description>
     {
       thy.asDocument.getDeclarations.flatMap {
  		   case c: symbols.Constant =>
  		     <CDDefinition>
  		       <Name>{c.name.toString}</Name>
  		       <Role>application</Role>
  		       {<Description></Description>}
  		       {<CMP></CMP>}
  		       {<FMP></FMP>}
  		       {<Example></Example>}
           </CDDefinition>
  		     
  		   case _ => Nil
       }
     }
    </CD>

    // write the XML element to the exorters output stream
    rh(cd)
  }
}

 